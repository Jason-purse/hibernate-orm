/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */

buildscript {
	// 构建脚本  仓库
	repositories {
		mavenCentral()
	}

	dependencies {
		// 获取一个版本 Gradle plugin for dynamic injection of the project version into classes (bytecode manipulation)
		classpath 'org.hibernate.build.gradle:version-injection-plugin:1.0.0'
		// asciidoctor
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.7'
		// 用于发布到 Bintray 的 Gradle 插件，具有 Bintray 特定的扩展；支持新旧 Gradle 发布模型。
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
		// 允许解析 Java 字节码以查找方法/类/字段签名的调用并导致构建失败。
		// https://github.com/policeman-tools/forbidden-apis
		classpath 'de.thetaphi:forbiddenapis:3.2'
		// junit-platform-gradle-plugin
		// JUnit 5
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
	}
}


plugins {
	// Integrates Jakarta XML binding into Gradle build
	id 'org.hibernate.build.xjc-jakarta' version '1.0.2' apply false
	// Gradle plugin for running tests against multiple databases
	id 'org.hibernate.matrix-test' version '3.1.1' apply false
	// 从 includeBuild中进行依赖获取 ...
	id 'org.hibernate.orm.database-service' version '1.0.0-SNAPSHOT' apply false

	// nexus 仓库发布
	id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
	// 一个插件  报关凭证 ...
	id 'nu.studer.credentials' version '2.1'

	id 'idea'
	// 构建触发  ...
	id 'org.jetbrains.gradle.plugin.idea-ext' version '1.0'
	id 'eclipse'
}

allprojects {
	repositories {
		mavenCentral()
		//Allow loading additional dependencies from a local path;
		//useful to load JDBC drivers which can not be distributed in public.
		if (System.env['ADDITIONAL_REPO'] != null) {
			flatDir {
				dirs "${System.env.ADDITIONAL_REPO}"
			}
		}
	}

	apply from: rootProject.file( 'gradle/base-information.gradle' )
	apply plugin: 'org.hibernate.orm.database-service'

	apply plugin: 'idea'
	apply plugin: 'eclipse'

	// minimize changes, at least for now (gradle uses 'build' by default)..
	buildDir = "target"
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Release Task

task release {
	description = "The task performed when we are performing a release build.  Relies on " +
			"the fact that subprojects will appropriately define a release task " +
			"themselves if they have any release-related activities to perform"

	doFirst {
		def javaVersionsInUse = [gradle.ext.javaVersions.main.compiler, gradle.ext.javaVersions.main.release,
								 gradle.ext.javaVersions.test.compiler, gradle.ext.javaVersions.test.release,
								 gradle.ext.javaVersions.test.launcher].toSet()
		if ( javaVersionsInUse != [JavaLanguageVersion.of( 11 )].toSet() ) {
			throw new IllegalStateException( "Please use JDK 11 to perform the release. Currently using: ${javaVersionsInUse}" )
		}
	}
}

task publish {
	description = "The task performed when we want to just publish maven artifacts.  Relies on " +
			"the fact that subprojects will appropriately define a release task " +
			"themselves if they have any release-related activities to perform"
}

ext {
	// 设置发布 用户凭证信息配置 ...
	// look for command-line overrides of the username/password pairs for publishing
	if ( project.hasProperty( 'hibernatePublishUsername' ) ) {
		if ( ! project.hasProperty( 'hibernatePublishPassword' ) ) {
			throw new GradleException( "Should specify both `hibernatePublishUsername` and `hibernatePublishPassword` as project properties" );
		}
		credentials.hibernatePublishUsername = project.property( 'hibernatePublishUsername' )
		credentials.hibernatePublishPassword = project.property( 'hibernatePublishPassword' )
	}
		// 或者系统属性 ...
	else if ( System.properties.hibernatePublishUsername != null ) {
		if ( System.properties.hibernatePublishPassword == null ) {
			throw new GradleException( "Should specify both `hibernatePublishUsername` and `hibernatePublishPassword` as system properties" );
		}
		credentials.hibernatePublishUsername = System.properties.hibernatePublishUsername
		credentials.hibernatePublishPassword = System.properties.hibernatePublishPassword
	}
}
// nexus 发布
nexusPublishing {
	repositories {
		sonatype {
			username = credentials.hibernatePublishUsername
			password = credentials.hibernatePublishPassword
		}
	}
}
// 任务图 增加一个任务执行图监听器
gradle.taskGraph.addTaskExecutionGraphListener(
		new TaskExecutionGraphListener() {
			@Override
			void graphPopulated(TaskExecutionGraph graph) {
				String[] tasksToLookFor = [
						'publish',
						'publishToSonatype',
						'publishAllPublicationsToSonatype',
						'publishPublishedArtifactsPublicationToSonatypeRepository',
						'publishRelocationArtifactsPublicationToSonatypeRepository',
				]

				// 这些任务发布的时候需要设置 凭证信息 ..
				for ( String taskToLookFor : tasksToLookFor ) {
					if ( graph.hasTask( taskToLookFor ) ) {
						// trying to publish - make sure the needed credentials are available

						if ( credentials.hibernatePublishUsername == null ) {
							throw new GradleException( "Publishing credentials not specified" );
						}
						if ( credentials.hibernatePublishPassword == null ) {
							throw new GradleException( "Publishing credentials not specified" );
						}

						break;
					}
				}
			}
		}
)


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// CI Build Task

task ciBuild {
	description = "The task performed when one of the 'main' jobs are triggered on the " +
			"CI server.  Just as above, relies on the fact that subprojects will " +
			"appropriately define a release task themselves if they have any tasks " +
			"which should be performed from these CI jobs"
}



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Misc...

wrapper {
	// To upgrade the version of gradle used in the wrapper, run:
	//     ./gradlew wrapper --gradle-version NEW_VERSION
	distributionType = Wrapper.DistributionType.ALL // wrapper 脚本配置  脚本的类型必须是ALL
}


idea {
//    project {
//		jdkName = gradle.ext.baselineJavaVersion
//		languageLevel = gradle.ext.baselineJavaVersion
//
//		vcs = 'Git'
//
//		settings {
//			taskTriggers {
//				afterSync tasks.getByName("projects"), tasks.getByName("tasks")
//			}
//		}
//    }
	// 指定模块为 hibernate-orm
	module {
		name = "hibernate-orm"
	}
}



